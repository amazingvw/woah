-----------------------------------
-- CONFIGURATION
-----------------------------------
local MAX_SPEED         = 22.7
local Y_SPEED           = 60      -- vertical speed (linear movement towards target Y)
local COIN_BUFFER       = 0.5
local MAX_COIN_DISTANCE = 400

local STEER_SPRING  = 45
local STEER_DAMP    = 1
local ROT_SPRING    = 700
local ROT_DAMP      = 10

-----------------------------------
-- SERVICES
-----------------------------------
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local player     = Players.LocalPlayer
local ws         = workspace

-----------------------------------
-- PERSISTENT UI (won't reset on respawn)
-----------------------------------
local function ensureUI()
    local gui = player:FindFirstChild("AutoCoinUI")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "AutoCoinUI"
        gui.ResetOnSpawn = false
        gui.Parent = player:WaitForChild("PlayerGui")

        local function makeLabel(name, yPos)
            local lbl = Instance.new("TextLabel", gui)
            lbl.Name = name
            lbl.Size = UDim2.new(0,200,0,30)
            lbl.Position = UDim2.new(0.5, -100, 0.5, yPos)
            lbl.BackgroundTransparency = 0.5
            lbl.TextScaled = true
            lbl.Text = name .. ": 0"
            return lbl
        end

        makeLabel("Bag",     -60)
        makeLabel("SuccessfulResets", -20)
        makeLabel("Deaths",   20)
        makeLabel("TotalCoins", 60)
    end
    return gui
end
local ui = ensureUI()
local bagLabel     = ui:FindFirstChild("Bag")
local resetLabel   = ui:FindFirstChild("SuccessfulResets")
local deathLabel   = ui:FindFirstChild("Deaths")
local totalLabel   = ui:FindFirstChild("TotalCoins")

-- Counters
local successfulResets = 0
local deathCount       = 0
local totalCoins       = 0
local lastBagCount     = 0

-----------------------------------
-- COIN VALIDATION
-----------------------------------
local function isCoinValid(coinPart)
    if not coinPart:IsA("BasePart") or coinPart.Name ~= "Coin_Server" then
        return false
    end
    local vis = coinPart:FindFirstChild("CoinVisual")
    return vis and vis:IsA("BasePart") and vis.Transparency <= 0.1
end

local function getClosestCoin(hrp)
    local closest, shortestDist = nil, math.huge
    for _, desc in ipairs(ws:GetDescendants()) do
        if desc:IsA("BasePart") and desc.Name == "Coin_Server" and isCoinValid(desc) then
            local dist = (hrp.Position - desc.Position).Magnitude
            if dist < shortestDist and dist <= MAX_COIN_DISTANCE then
                shortestDist = dist
                closest = desc
            end
        end
    end
    return closest
end

-----------------------------------
-- MOVEMENT & COLLECTION
-----------------------------------
local function moveContinuously(char)
    local hrp = char:WaitForChild("HumanoidRootPart")
    local dirVel, rotVel = Vector3.zero, Vector3.zero
    local forward = hrp.CFrame.LookVector
    local targetCoin

    -- every second, zero out velocities
    spawn(function()
        while char.Parent do
            wait(1)
            if hrp and hrp:IsDescendantOf(ws) then
                hrp.AssemblyLinearVelocity  = Vector3.zero
                hrp.AssemblyAngularVelocity = Vector3.zero
            end
        end
    end)

    while char.Parent do
        local dt = RunService.Heartbeat:Wait()

        if not targetCoin
        or not targetCoin:IsDescendantOf(ws)
        or not isCoinValid(targetCoin) then
            targetCoin = getClosestCoin(hrp)
        end

        if targetCoin then
            local distVec = targetCoin.Position - hrp.Position
            local horizontalDist = Vector3.new(distVec.x,0,distVec.z).Magnitude
            local radius = targetCoin.Size.Magnitude/2 + COIN_BUFFER

            if horizontalDist <= radius and math.abs(distVec.y) <= radius then
                -- collect
                for _, p in ipairs(targetCoin:GetDescendants()) do
                    if p:IsA("BasePart") then
                        p.Transparency = 0.5
                        p.CanCollide = false
                    end
                end
                targetCoin = nil
            else
                -- horizontal steering
                local desiredH = Vector3.new(distVec.x,0,distVec.z).Unit
                local dVel = desiredH - Vector3.new(forward.x,0,forward.z)
                local steerAccel = dVel * STEER_SPRING
                dirVel = (dirVel + steerAccel*dt) * math.exp(-STEER_DAMP*dt)
                forward = (forward + Vector3.new(dirVel.x,0,dirVel.z)*dt).Unit

                -- compute yaw-only rotation
                local yaw = math.atan2(forward.x, forward.z)

                -- apply movement: faster on Y
                local moveH = forward * MAX_SPEED * dt
                local dy = distVec.y
                local moveV = Vector3.new(0, math.clamp(dy, -1,1) * Y_SPEED * dt, 0)

                local newPos = hrp.Position + moveH + moveV
                hrp.CFrame = CFrame.new(newPos) * CFrame.Angles(0, yaw, 0)
            end
        end
    end
end

-----------------------------------
-- NOCLIP
-----------------------------------
RunService.Stepped:Connect(function()
    if player.Character then
        for _, v in ipairs(player.Character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end
end)

-----------------------------------
-- MODEL CLEANUP
-----------------------------------
local terrain = ws:FindFirstChildOfClass("Terrain")
local function isMapModel(m)
    if not m:IsA("Model") then return false end
    return m:FindFirstChild("Base")
        or m:FindFirstChild("CoinContainer")
        or m:FindFirstChild("CoinAreas")
end
local function cleanMapModel(m)
    for _, c in ipairs(m:GetChildren()) do
        if c.Name ~= "CoinContainer" and c.Name ~= "CoinAreas" then
            c:Destroy()
        end
    end
end
local function sweepWorkspace()
    for _, obj in ipairs(ws:GetChildren()) do
        if obj == player.Character then
        elseif terrain and obj == terrain then
        elseif obj:IsA("Camera") then
        elseif isMapModel(obj) then
            cleanMapModel(obj)
        else
            obj:Destroy()
        end
    end
end
ws.ChildAdded:Connect(function(obj)
    RunService.Heartbeat:Wait()
    if obj == player.Character then return end
    if terrain and obj == terrain then return end
    if obj:IsA("Camera") then return end
    if isMapModel(obj) then
        cleanMapModel(obj)
    else
        obj:Destroy()
    end
end)

-----------------------------------
-- CHARACTER INIT + GUI & COUNTERS
-----------------------------------
local function onCharacterAdded(char)
    local humanoid = char:WaitForChild("Humanoid")
    local hrp      = char:WaitForChild("HumanoidRootPart")

    workspace.Gravity = 0
    -- Removed PlatformStand per request

    -- zero velocity after spawn
    task.delay(0.5, function()
        if hrp and hrp:IsDescendantOf(ws) then
            hrp.AssemblyLinearVelocity  = Vector3.zero
            hrp.AssemblyAngularVelocity = Vector3.zero
        end
    end)

    -- Track bag text
    local coinsTextLabel = player:WaitForChild("PlayerGui")
        :WaitForChild("MainGUI")
        :WaitForChild("Game")
        :WaitForChild("CoinBags")
        :WaitForChild("Container")
        :WaitForChild("BeachBall")
        :WaitForChild("CurrencyFrame")
        :WaitForChild("Icon")
        :WaitForChild("Coins")

    -- Update UI and counters when bag text changes
    local function onTextChanged()
        local bag = tonumber(coinsTextLabel.Text) or 0
        -- update Bag UI
        bagLabel.Text = ("Bag: %d/40"):format(bag)
        -- totalCoins increment
        if bag > lastBagCount then
            totalCoins = totalCoins + (bag - lastBagCount)
            totalLabel.Text = ("TotalCoins: %d"):format(totalCoins)
        end
        lastBagCount = bag
        -- if full bag â†’ reset
        if bag >= 40 then
            successfulResets = successfulResets + 1
            resetLabel.Text = ("SuccessfulResets: %d"):format(successfulResets)
            humanoid.Health = 0
        end
    end
    coinsTextLabel:GetPropertyChangedSignal("Text"):Connect(onTextChanged)
    onTextChanged()

    -- count other deaths
    humanoid.Died:Connect(function()
        if lastBagCount < 40 then
            deathCount = deathCount + 1
            deathLabel.Text = ("Deaths: %d"):format(deathCount)
        end
    end)

    -- workspace cleanup & movement
    sweepWorkspace()
    task.defer(function()
        moveContinuously(char)
    end)
end

-- Hook up
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)
