-- paste this in DevConsole once, it will auto-reapply after every respawn
if not getgenv().SigmaFarm then
    getgenv().SigmaFarm = true
    local Players    = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local player     = Players.LocalPlayer

    ----------------------------------------------------------------
    -- persistent config + state
    ----------------------------------------------------------------
    local C = {}
    C.speed           = 22.7
    C.fullbag1Enabled = false
    C.fullbag2Enabled = false
    C.fullbag1Goal    = 40
    C.fullbag2Goal    = 20
    C.enabled         = true

    local S = {}   -- runtime state
    S.count1   = 0
    S.count2   = 0
    S.dirVel   = Vector3.zero
    S.rotVel   = Vector3.zero
    S.forward  = nil
    S.target   = nil

    ----------------------------------------------------------------
    -- UTILITIES
    ----------------------------------------------------------------
    local function isCoinValid(p)
        if p.Name ~= "Coin_Server" then return false end
        for _, c in ipairs(p:GetDescendants()) do
            if c:IsA("BasePart") and c.Transparency <= 0.1 then
                return true
            end
        end
        return false
    end

    local function getClosest(hrp)
        local best, bd = nil, math.huge
        for _, d in ipairs(workspace:GetDescendants()) do
            if d:IsA("BasePart") and d.Name=="Coin_Server" and isCoinValid(d) then
                local dist = (hrp.Position - d.Position).Magnitude
                if dist < bd and dist <= 400 then
                    bd, best = dist, d
                end
            end
        end
        return best
    end

    local function postRespawn(char)
        -- reset counts & steer state
        S.count1, S.count2 = 0, 0
        S.dirVel, S.rotVel = Vector3.zero, Vector3.zero
        S.target = nil

        -- wait for HRP & humanoid
        local hrp = char:WaitForChild("HumanoidRootPart")
        S.forward = hrp.CFrame.LookVector
        local hum = char:FindFirstChildWhichIsA("Humanoid")
        -- zero gravity + platform stand
        workspace.Gravity = 0
        if hum then hum.PlatformStand = true end
    end

    local function movementTick(dt)
        if not C.enabled then return end
        local char = player.Character
        if not char or not char.Parent then return end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        -- refresh target
        if not S.target or not S.target:IsDescendantOf(workspace) or not isCoinValid(S.target) then
            S.target = getClosest(hrp)
        end

        if S.target then
            local dist = (hrp.Position - S.target.Position).Magnitude
            local radius = S.target.Size.Magnitude/2 + 1
            if dist <= radius then
                -- count and fade
                if S.target:FindFirstChild("CoinVisual") then
                    S.count1 += 1
                else
                    S.count2 += 1
                end
                for _, c in ipairs(S.target:GetDescendants()) do
                    if c:IsA("BasePart") then
                        c.Transparency = 0.5
                        c.CanCollide  = false
                    end
                end

                -- full-bag check
                if C.fullbag1Enabled and C.fullbag2Enabled then
                    if S.count1>=C.fullbag1Goal and S.count2>=C.fullbag2Goal then
                        player:LoadCharacter()
                    end
                elseif C.fullbag1Enabled then
                    if S.count1>=C.fullbag1Goal then
                        player:LoadCharacter()
                    end
                elseif C.fullbag2Enabled then
                    if S.count2>=C.fullbag2Goal then
                        player:LoadCharacter()
                    end
                end

                S.target = nil
            else
                -- steering
                local desired = (S.target.Position - hrp.Position).Unit
                local dVel = desired - S.forward
                S.dirVel = (S.dirVel + dVel*45*dt)*math.exp(-1*dt)
                S.forward = (S.forward + S.dirVel*dt).Unit

                -- rotation
                local dLook = S.forward - hrp.CFrame.LookVector
                local aLook = dLook * 700
                S.rotVel = (S.rotVel + aLook*dt)*math.exp(-10*dt)
                local lookDir = (hrp.CFrame.LookVector + S.rotVel*dt).Unit

                -- move
                local newPos = hrp.Position + S.forward*C.speed*dt
                hrp.CFrame = CFrame.new(newPos, newPos+lookDir)
            end
        end
    end

    ----------------------------------------------------------------
    -- GUI (only once)
    ----------------------------------------------------------------
    local gui = player:WaitForChild("PlayerGui"):FindFirstChild("SigmaFarmGUI")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "SigmaFarmGUI"
        gui.Parent = player.PlayerGui
        gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        -- (re-use your exact Frame+elements here, just change their Parent to gui)
        -- For brevity, Iâ€™m going to assume you paste your entire GUI block here,
        -- but set ScreenGui.Parent = gui, Frame.Parent = gui, etc.

        -- Then hook up events exactly as before, but reading/writing `C`.

        -- e.g. Speed_2.FocusLost:Connect(function(enter)
        --         local v = tonumber(Speed_2.Text)
        --         if v then C.speed = v end
        --       end)
        -- and so on for FB1Btn, FB2Btn, Fullbag1, Fullbag2, Main

        -- (Finally, store references in local vars so your hooks point to this GUI.)
    end

    ----------------------------------------------------------------
    -- NOCLIP (once)
    ----------------------------------------------------------------
    RunService.Stepped:Connect(function()
        local char = player.Character
        if char then
            for _, v in ipairs(char:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end)

    ----------------------------------------------------------------
    -- CONNECTIONS (once)
    ----------------------------------------------------------------
    player.CharacterAdded:Connect(postRespawn)
    postRespawn(player.Character or player.CharacterAdded:Wait())
    RunService.Heartbeat:Connect(movementTick)
end
