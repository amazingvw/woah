
}

local Players              = game:GetService("Players")
local StarterPlayer        = game:GetService("StarterPlayer")
local ContextActionService = game:GetService("ContextActionService")

local player            = Players.LocalPlayer
local originalCharacter = player.Character or player.CharacterAdded:Wait()
local debugDummy        = workspace:FindFirstChild("DebugDummy")  -- reuse if already in workspace
local controllingDummy  = false
local lastCameraCFrame  = nil

-- When your real character respawns, just update the reference.
player.CharacterAdded:Connect(function(char)
	if char.Name ~= "DebugDummy" then
		originalCharacter = char
		controllingDummy  = false
		-- restore camera if you were in dummy
		if controllingDummy and debugDummy then
			player.Character = debugDummy
			workspace.CurrentCamera.CameraSubject = debugDummy:WaitForChild("Humanoid")
		end
	end
end)

-- Utility: make every child archivable so :Clone() captures everything
local function setArchivableRecursive(inst)
	inst.Archivable = true
	for _, c in ipairs(inst:GetChildren()) do
		setArchivableRecursive(c)
	end
end

-- Build or clone the DebugDummy
local function cloneCharacter(orig)
	local model

	if Config.targetUserId then
		-- Morph into another user’s avatar
		local desc = Players:GetHumanoidDescriptionFromUserId(Config.targetUserId)
		model = Players:CreateHumanoidModelFromDescription(desc, Config.rigType)  -- :contentReference[oaicite:2]{index=2}
	else
		-- Exact copy of your current character
		setArchivableRecursive(orig)
		model = orig:Clone()
	end

	model.Name = "DebugDummy"

	-- Position it with your offset
	local hrp = model:FindFirstChild("HumanoidRootPart")
	if hrp and orig:FindFirstChild("HumanoidRootPart") then
		hrp.CFrame = orig.HumanoidRootPart.CFrame * CFrame.new(Config.cloneOffset)
	end

	-- Show your display name on the dummy
	local hum = model:FindFirstChildOfClass("Humanoid")
	if hum then
		hum.DisplayName = player.DisplayName
	end

	model.Parent = workspace

	-- When dummy itself dies: switch you back, then wipe after RespawnTime
	if hum then
		hum.Died:Connect(function()
			if controllingDummy then
				-- switch camera & control back
				player.Character = originalCharacter
				workspace.CurrentCamera.CameraSubject = originalCharacter:WaitForChild("Humanoid")
				controllingDummy = false
			end
			-- queue removal after the client respawn delay
			local delaySec = Players.RespawnTime or 5  -- :contentReference[oaicite:3]{index=3}
			task.delay(delaySec, function()
				if debugDummy and debugDummy.Parent then
					debugDummy:Destroy()
				end
				debugDummy = nil
			end)
		end)
	end

	return model
end

-- Rerun any LocalScripts from StarterCharacterScripts
local function runStarterCharacterScripts(target)
	for _, scr in ipairs(StarterPlayer.StarterCharacterScripts:GetChildren()) do
		if scr:IsA("LocalScript") then
			scr:Clone().Parent = target
		end
	end
end

-- Force the Animate script to reload so animations play fresh
local function resetAnimate(character)
	local ani = character:FindFirstChild("Animate")
	if ani and ani:IsA("LocalScript") then
		ani.Disabled = true
		ani.Disabled = false
	end
end

-- Swap `player.Character`, camera subject, restore camera CFrame, reload animations
local function switchTo(character)
	player.Character = character
	workspace.CurrentCamera.CameraSubject = character:WaitForChild("Humanoid")
	if lastCameraCFrame then
		workspace.CurrentCamera.CFrame = lastCameraCFrame
	end
	resetAnimate(character)
end

-- Y‐key handler: spawn or reuse the dummy, then toggle control/camera
local function toggleControl(_, state)
	if state ~= Enum.UserInputState.Begin then return end

	lastCameraCFrame = workspace.CurrentCamera.CFrame

	if not debugDummy then
		debugDummy = cloneCharacter(originalCharacter)
		runStarterCharacterScripts(debugDummy)
	end

	if controllingDummy then
		switchTo(originalCharacter)
	else
		switchTo(debugDummy)
	end
	controllingDummy = not controllingDummy
end

ContextActionService:BindAction("ToggleDebugDummy", toggleControl, false, Enum.KeyCode.Y)
