-----------------------------------
-- CONFIGURATION
-----------------------------------
local MAX_SPEED         = 22.7
local COIN_BUFFER       = 1
local MAX_COIN_DISTANCE = 400

local TARGET_COIN_SIZE  = Vector3.new(1.75, 6, 1.75)
local COIN_VISUAL_OFFSET = Vector3.new(0, -2.5, 0)

-----------------------------------
-- SERVICES
-----------------------------------
local Players    = game:GetService("Players")
local RunService = game:GetService("RunService")
local player     = Players.LocalPlayer
local ws         = workspace
local terrain    = ws:FindFirstChildOfClass("Terrain")

-----------------------------------
-- COIN VALIDATION
-----------------------------------
local function isCoinValid(coinPart)
	if not coinPart:IsA("BasePart") or coinPart.Name ~= "Coin_Server" then
		return false
	end
	local vis = coinPart:FindFirstChild("CoinVisual")
	return vis and vis:IsA("BasePart") and vis.Transparency <= 0.1
end

local function getClosestCoin(hrp)
	local closest, shortestDist = nil, math.huge
	for _, desc in ipairs(ws:GetDescendants()) do
		if desc:IsA("BasePart") and desc.Name == "Coin_Server" and isCoinValid(desc) then
			local dist = (hrp.Position - desc.Position).Magnitude
			if dist < shortestDist and dist <= MAX_COIN_DISTANCE then
				shortestDist = dist
				closest = desc
			end
		end
	end
	return closest
end

-----------------------------------
-- MOVEMENT & COLLECTION
-----------------------------------
local function moveContinuously(char)
	local hrp = char:WaitForChild("HumanoidRootPart")
	local rootModel = char

	local targetCoin
	local rotateTimer = 0

	while char.Parent do
		local dt = RunService.Heartbeat:Wait()
		rotateTimer += dt

		-- Re-evaluate target coin
		if not targetCoin or not targetCoin:IsDescendantOf(ws) or not isCoinValid(targetCoin) then
			targetCoin = getClosestCoin(hrp)
			if targetCoin then
				targetCoin.Size = TARGET_COIN_SIZE
			end
		end

		if targetCoin then
			local vis = targetCoin:FindFirstChild("CoinVisual")
			if vis then
				local targetPos = Vector3.new(vis.Position.X, vis.Position.Y + COIN_VISUAL_OFFSET.Y, vis.Position.Z)
				local dist = (hrp.Position - targetPos).Magnitude
                                if dist <= 0.5 then
                                    for _, p in ipairs(targetCoin:GetDescendants()) do
                                        if p:IsA("BasePart") then
                                            p.Transparency = 0.5
                                            p.CanCollide = false
                                        end
                                    end
                                    targetCoin = nil

				else
					local direction = (targetPos - hrp.Position).Unit
					local newPos = hrp.Position + direction * MAX_SPEED * dt
					local moveDelta = newPos - hrp.Position
					rootModel:PivotTo(rootModel:GetPivot() + moveDelta)
				end
			end
		end

		-- Apply global rotation every second
		if rotateTimer >= 1 then
			rotateTimer = 0
			local pivot = rootModel:GetPivot()
			rootModel:PivotTo(CFrame.new(pivot.Position) * CFrame.Angles(math.rad(90), 0, 0))
		end
	end
end

-----------------------------------
-- NOCLIP
-----------------------------------
RunService.Stepped:Connect(function()
	if player.Character then
		for _, v in ipairs(player.Character:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
	end
end)

-----------------------------------
-- CHARACTER INIT + RESPAWN
-----------------------------------
local function onCharacterAdded(char)
	local humanoid = char:WaitForChild("Humanoid")
	local hrp = char:WaitForChild("HumanoidRootPart")

	workspace.Gravity = 0
	humanoid.PlatformStand = true

	task.delay(0.5, function()
		if hrp and hrp:IsDescendantOf(workspace) then
			-- Teleport character 10 studs below current position
			local pivot = char:GetPivot()
			char:PivotTo(CFrame.new(pivot.Position - Vector3.new(0, 10, 0)))
			-- Zero out motion
			hrp.AssemblyLinearVelocity = Vector3.zero
			hrp.AssemblyAngularVelocity = Vector3.zero
		end
	end)

	local coinsTextLabel = player:WaitForChild("PlayerGui")
		:WaitForChild("MainGUI")
		:WaitForChild("Game")
		:WaitForChild("CoinBags")
		:WaitForChild("Container")
		:WaitForChild("BeachBall")
		:WaitForChild("CurrencyFrame")
		:WaitForChild("Icon")
		:WaitForChild("Coins")

	local function onTextChanged()
		if tonumber(coinsTextLabel.Text) == 40 then
			local hum = char:FindFirstChildOfClass("Humanoid")
			if hum then
				hum.Health = 0
			end
		end
	end

	coinsTextLabel:GetPropertyChangedSignal("Text"):Connect(onTextChanged)
	onTextChanged()

	task.defer(function()
		moveContinuously(char)
	end)
end

if player.Character then
	onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-----------------------------------
-- CLEANUP & MAP FILTER
-----------------------------------
local function isMapModel(m)
	if not m:IsA("Model") then return false end
	return m:FindFirstChild("Base") or m:FindFirstChild("CoinContainer") or m:FindFirstChild("CoinAreas")
end

local function cleanMapModel(m)
	for _, c in ipairs(m:GetChildren()) do
		if c.Name ~= "CoinContainer" and c.Name ~= "CoinAreas" then
			c:Destroy()
		end
	end
end

local function sweepWorkspace()
	for _, obj in ipairs(ws:GetChildren()) do
		if obj == player.Character or obj == terrain or obj:IsA("Camera") then
			continue
		elseif isMapModel(obj) then
			cleanMapModel(obj)
		else
			obj:Destroy()
		end
	end
end

local function onChildAdded(obj)
	RunService.Heartbeat:Wait()

	if obj == player.Character or obj == terrain or obj:IsA("Camera") then
		return
	elseif isMapModel(obj) then
		cleanMapModel(obj)
	else
		obj:Destroy()
	end
end

player.CharacterAdded:Connect(function(char)
	char:WaitForChild("HumanoidRootPart", 5)
	sweepWorkspace()
end)

ws.ChildAdded:Connect(onChildAdded)

if player.Character then
	sweepWorkspace()
end
