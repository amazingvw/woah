--[[─────────────────── CONFIG ───────────────────]]

local Config = {
    targetUserId = nil,                        -- number or nil: morph into this user’s avatar
    rigType      = Enum.HumanoidRigType.R15,   -- Enum.HumanoidRigType.R15 or .R6
    cloneOffset  = Vector3.new(0, 5, 0),       -- CFrame offset for the dummy’s spawn
}

local Players              = game:GetService("Players")
local StarterPlayer        = game:GetService("StarterPlayer")
local ContextActionService = game:GetService("ContextActionService")

local player            = Players.LocalPlayer
local originalCharacter = player.Character or player.CharacterAdded:Wait()
local debugDummy        = workspace:FindFirstChild("DebugDummy")  -- reuse if already in workspace
local controllingDummy  = false
local lastCameraCFrame  = nil

-- Helper: re-run every LocalScript in StarterCharacterScripts on the target model
local function runStarterCharacterScripts(target)
    for _, script in ipairs(StarterPlayer.StarterCharacterScripts:GetChildren()) do
        if script:IsA("LocalScript") then
            script:Clone().Parent = target
        end
    end
end

-- When your real character respawns, update refs but keep dummy around
player.CharacterAdded:Connect(function(char)
    if char.Name ~= "DebugDummy" then
        originalCharacter = char
        controllingDummy  = false
        -- If you were toggled into the dummy, re-apply that after respawn
        if debugDummy and debugDummy.Parent and controllingDummy then
            player.Character = debugDummy
            workspace.CurrentCamera.CameraSubject = debugDummy:WaitForChild("Humanoid")
        end
    end
end)

-- Utility: recursively mark everything archivable
local function setArchivableRecursive(inst)
    inst.Archivable = true
    for _, c in ipairs(inst:GetChildren()) do
        setArchivableRecursive(c)
    end
end

-- Build or clone the DebugDummy
local function cloneCharacter(orig)
    local model

    if Config.targetUserId then
        -- Morph into another user’s avatar
        local desc = Players:GetHumanoidDescriptionFromUserId(Config.targetUserId)
        model = Players:CreateHumanoidModelFromDescription(desc, Config.rigType)
    else
        -- Exact copy of your current character
        setArchivableRecursive(orig)
        model = orig:Clone()
    end

    model.Name = "DebugDummy"

    -- Position it with your offset
    local hrp = model:FindFirstChild("HumanoidRootPart")
    if hrp and orig:FindFirstChild("HumanoidRootPart") then
        hrp.CFrame = orig.HumanoidRootPart.CFrame * CFrame.new(Config.cloneOffset)
    end

    -- Show your display name on the dummy
    local hum = model:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.DisplayName = player.DisplayName
    end

    model.Parent = workspace

    -- ▶ Re-execute all StarterCharacterScripts on the dummy:
    runStarterCharacterScripts(model)

    -- ▶ Handle dummy death:
    local respawnDelay = Players.RespawnTime or 5
    if hum then
        hum.Died:Connect(function()
            if controllingDummy then
                -- switch you back to real character
                player.Character = originalCharacter
                workspace.CurrentCamera.CameraSubject = originalCharacter:WaitForChild("Humanoid")
                controllingDummy = false
            end
            -- after respawnDelay seconds, cleanup so next Y makes a new one
            task.delay(respawnDelay, function()
                if debugDummy and debugDummy.Parent then
                    debugDummy:Destroy()
                end
                debugDummy = nil
            end)
        end)
    end

    return model
end

-- Reset Animate so animations replay cleanly
local function resetAnimate(character)
    local ani = character:FindFirstChild("Animate")
    if ani and ani:IsA("LocalScript") then
        ani.Disabled = true
        ani.Disabled = false
    end
end

-- Swap camera + player.Character + animation reset
local function switchTo(character)
    player.Character = character
    workspace.CurrentCamera.CameraSubject = character:WaitForChild("Humanoid")
    if lastCameraCFrame then
        workspace.CurrentCamera.CFrame = lastCameraCFrame
    end
    resetAnimate(character)
end

-- Y-key handler: create dummy once per life, then toggle
local function onToggle(_, state)
    if state ~= Enum.UserInputState.Begin then return end

    -- remember camera position/orientation
    lastCameraCFrame = workspace.CurrentCamera.CFrame

    -- create dummy once per life
    if not debugDummy then
        debugDummy = cloneCharacter(originalCharacter)
    end

    if controllingDummy then
        switchTo(originalCharacter)
    else
        switchTo(debugDummy)
    end

    controllingDummy = not controllingDummy
end

ContextActionService:BindAction("ToggleDebugDummy", onToggle, false, Enum.KeyCode.Y)
