-- Configuration
local Config = {
	-- ROOT PART
	RootPart_LookDirection_Lerp = 15,
	RootPart_JumpPower = 50,
	RootPart_Speed = 20,

	-- HumanoidRootPart follow spring
	HRP_Frequency = 4,
	HRP_Dampening = 0.5,
	HRP_Directional_Lerp = 9,

	-- Physics simulation
	Gravity = workspace.Gravity,
	CollisionSizeBuffer = 3.5,

	-- Funny swing offsets
	Swing_Pos_Amplitude = Vector3.new(0.5, 0.5, 0.5),
	Swing_Pos_Frequency = 1,
	Swing_Rot_Amplitude = Vector3.new(5, 5, 5),
	Swing_Rot_Frequency = 0.5,

	-- Custom Animations (rbxassetid://...)
	Animations = {
		Idle     = "rbxassetid://109212599530",
		Run      = "rbxassetid://116002114100",
		Jump     = "rbxassetid://109212638600",
		Fall     = "rbxassetid://109212628640",
	},
	-- Delay before fall animation (seconds)
	FallDelay = 0.2,

	-- Tilt effect
	Tilt_Intensity = Vector3.new(-50, 0, -50), -- degrees: X pitch, Y yaw, Z roll
	Tilt_Lerp = 2,                         -- interpolation speed
}


-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Player & Character references
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:FindFirstChildOfClass("Humanoid")

-- Prevent default humanoid physics and disable all collisions
if humanoid then humanoid.PlatformStand = true end
for _, part in ipairs(character:GetDescendants()) do
	if part:IsA("BasePart") then part.CanCollide = false end
end

-- Create the Root part
local root = Instance.new("Part")
root.Name = "Root"
root.Size = Vector3.new(2,7,2)
root.Anchored = true
root.CanCollide = false
root.Position = hrp.Position + Vector3.new(0,2,0)
root.Parent = workspace
root.Transparency = 1

-- Build ignore list (character + root)
local ignoreList = {root}
for _, part in ipairs(character:GetDescendants()) do
	if part:IsA("BasePart") then table.insert(ignoreList, part) end
end

-- Raycast parameters
local wallParams = RaycastParams.new()
wallParams.FilterDescendantsInstances = ignoreList
wallParams.FilterType = Enum.RaycastFilterType.Blacklist
wallParams.IgnoreWater = false

local groundParams = RaycastParams.new()
groundParams.FilterDescendantsInstances = ignoreList
groundParams.FilterType = Enum.RaycastFilterType.Blacklist
groundParams.IgnoreWater = false

-- Animation setup
local animator, animTracks = nil, {}
local animState = "Idle"
if humanoid then
	animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
	local function loadTrack(name, id, loop)
		local anim = Instance.new("Animation")
		anim.Name = name
		anim.AnimationId = id
		local track = animator:LoadAnimation(anim)
		track.Looped = loop
		animTracks[name] = track
	end
	loadTrack("Idle", Config.Animations.Idle, true)
	loadTrack("Run", Config.Animations.Run, true)
	loadTrack("Jump", Config.Animations.Jump, false)
	loadTrack("Fall", Config.Animations.Fall, true)
	animTracks.Idle:Play()
end

local function playAnim(state)
	if animState == state then return end
	for _, track in pairs(animTracks) do track:Stop() end
	if animTracks[state] then animTracks[state]:Play() end
	animState = state
end

-- State variables
local velocity = Vector3.new()
local hrpVelocity = Vector3.new()
local moveDir = Vector3.new()
local Timer = 0

local isGrounded = false
local prevGrounded = true

-- Jump control
local canJump = false
local jumpRequested = false
UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.Space and canJump then
		jumpRequested = true
		canJump = false
	end
end)

-- Ground check function
local function checkGrounded()
	local ray = workspace:Raycast(root.Position, Vector3.new(0, -((root.Size.Y/2) + Config.CollisionSizeBuffer + 0.1), 0), groundParams)
	return ray ~= nil
end

-- Input update for movement & animation
local function updateInput()
	-- Movement direction from camera-relative WASD
	local camCF = workspace.CurrentCamera.CFrame
	local dir = Vector3.new()
	if UserInputService:IsKeyDown(Enum.KeyCode.W) then dir += camCF.LookVector end
	if UserInputService:IsKeyDown(Enum.KeyCode.S) then dir -= camCF.LookVector end
	if UserInputService:IsKeyDown(Enum.KeyCode.A) then dir -= camCF.RightVector end
	if UserInputService:IsKeyDown(Enum.KeyCode.D) then dir += camCF.RightVector end
	dir = Vector3.new(dir.X,0,dir.Z)
	moveDir = dir.Magnitude > 0 and dir.Unit or Vector3.new()

	-- Animation state transition
	if animState == "Jump" and animTracks.Jump.IsPlaying then return end
	if not isGrounded then
		playAnim("Fall")
	elseif moveDir.Magnitude > 0 then
		playAnim("Run")
	else
		playAnim("Idle")
	end
end

-- Collision & gravity simulation
local function simulateCollision(pos, vel, dt)
	local newPos = pos + vel * dt
	local corrVel = vel
	-- Horizontal
	for _, axis in ipairs({Vector3.new(1,0,0),Vector3.new(0,0,1)}) do
		local comp = vel:Dot(axis)
		if comp ~= 0 then
			local dir = axis * math.sign(comp)
			local dist = math.abs(comp*dt) + Config.CollisionSizeBuffer
			local hit = workspace:Raycast(pos, dir*dist, wallParams)
			if hit and hit.Instance.CanCollide then corrVel -= axis*comp end
		end
	end
	-- Vertical
	if vel.Y ~= 0 then
		local dir = Vector3.new(0, math.sign(vel.Y),0)
		local dist = math.abs(vel.Y*dt) + Config.CollisionSizeBuffer
		local hit = workspace:Raycast(pos, dir*dist, groundParams)
		if hit and hit.Instance.CanCollide then
			if vel.Y < 0 then
				corrVel = Vector3.new(corrVel.X,0,corrVel.Z)
				newPos = Vector3.new(newPos.X, hit.Position.Y + root.Size.Y/2, newPos.Z)
			else
				corrVel = Vector3.new(corrVel.X,0,corrVel.Z)
			end
		end
	end
	return corrVel, newPos
end

-- Spring follow with combined tilt & random swing
local function springFollow(dt)
	Timer += dt
	-- Swing offset
	local ox = math.noise(Timer*Config.Swing_Pos_Frequency,0)*Config.Swing_Pos_Amplitude.X
	local oy = math.noise(Timer*Config.Swing_Pos_Frequency,100)*Config.Swing_Pos_Amplitude.Y
	local oz = math.noise(Timer*Config.Swing_Pos_Frequency,200)*Config.Swing_Pos_Amplitude.Z
	local swingPos = Vector3.new(ox,oy,oz)
	-- Swing rotation
	local rx = math.noise(Timer*Config.Swing_Rot_Frequency,300)*Config.Swing_Rot_Amplitude.X
	local ry = math.noise(Timer*Config.Swing_Rot_Frequency,400)*Config.Swing_Rot_Amplitude.Y
	local rz = math.noise(Timer*Config.Swing_Rot_Frequency,500)*Config.Swing_Rot_Amplitude.Z
	local swingRot = CFrame.Angles(math.rad(rx),math.rad(ry),math.rad(rz))
	-- Directional tilt
	local localMove = root.CFrame:VectorToObjectSpace(moveDir)
	local tiltX = -localMove.Z * Config.Tilt_Intensity.X
	local tiltZ = localMove.X * Config.Tilt_Intensity.Z
	local tiltCFrame = CFrame.Angles(math.rad(tiltX),0,math.rad(tiltZ))
	-- Combine rotations and position
	local rootRot = root.CFrame - root.CFrame.Position
	local targetRot = rootRot * tiltCFrame * swingRot
	local targetPos = root.Position + swingPos
	-- Spring physics
	local f,d = Config.HRP_Frequency, Config.HRP_Dampening
	local accel = f*f*(targetPos-hrp.Position) - 2*f*d*hrpVelocity
	hrpVelocity += accel*dt
	local newPos = hrp.Position + hrpVelocity*dt
	local currentRot = hrp.CFrame - hrp.CFrame.Position
	local lerpF = math.clamp(Config.HRP_Directional_Lerp*dt,0,1)
	local newRot = currentRot:Lerp(targetRot,lerpF)
	hrp.CFrame = CFrame.new(newPos)*newRot
	hrp.AssemblyLinearVelocity = Vector3.zero
	hrp.AssemblyAngularVelocity = Vector3.zero
end

-- Main update loop
RunService.RenderStepped:Connect(function(dt)
	-- Update grounded state & reset jump ability on landing
	prevGrounded = isGrounded
	isGrounded = checkGrounded()
	if not prevGrounded and isGrounded then
		canJump = true
		playAnim(moveDir.Magnitude>0 and "Run" or "Idle")
	end

	-- Handle input & animation
	updateInput()
	-- Execute jump
	if jumpRequested and isGrounded then
		velocity = Vector3.new(velocity.X, Config.RootPart_JumpPower, velocity.Z)
		jumpRequested = false
		playAnim("Jump")
		animTracks.Jump.Stopped:Connect(function()
			if not isGrounded then
				wait(Config.FallDelay)
				playAnim("Fall")
			end
		end)
	end

	-- Movement & gravity
	local horiz = moveDir * Config.RootPart_Speed
	velocity = Vector3.new(horiz.X, velocity.Y, horiz.Z) + Vector3.new(0, -Config.Gravity*dt, 0)
	velocity, localPos = simulateCollision(root.Position, velocity, dt)
	root.Position = localPos

	-- Rotate root
	local flatV = Vector3.new(velocity.X,0,velocity.Z)
	if flatV.Magnitude>0.1 then
		local desired = CFrame.new(root.Position,root.Position+flatV)
		if UserInputService.MouseBehavior==Enum.MouseBehavior.LockCenter then
			local _,y,_=workspace.CurrentCamera.CFrame:ToEulerAnglesYXZ()
			desired=CFrame.new(root.Position)*CFrame.Angles(0,y,0)
		end
		root.CFrame = root.CFrame:Lerp(desired,math.clamp(Config.RootPart_LookDirection_Lerp*dt,0,1))
	end

	-- Follow with tilt & swing
	springFollow(dt)
end)

local Noclip = nil
local Clip = nil

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21) -- basic optimization
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then Noclip:Disconnect() end
	Clip = true
end

noclip() -- to toggle noclip() and clip()
